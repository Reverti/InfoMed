//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonMedicament_Medicaments", "Medicaments", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Medicaments), "AssignedMedicament", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.AssignedMedicament), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonMedicament_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "AssignedMedicament", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.AssignedMedicament), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonRiskFactor_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "AssignedRiskFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.AssignedRiskFactor), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonRiskFactor_RiskFactors", "RiskFactors", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.RiskFactors), "AssignedRiskFactor", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.AssignedRiskFactor), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonSymptom_Person", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "AssignedSymptom", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.AssignedSymptom), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonSymptom_Symptoms", "Symptoms", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Symptoms), "AssignedSymptom", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.AssignedSymptom), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonContact_ContactTypes", "ContactTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.ContactTypes), "PersonContact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.PersonContact), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_Credentials_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "Credentials", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(DataLayer.DataBaseModels.Credentials), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonGroup_Groups", "Groups", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Groups), "PersonGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.PersonGroup), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonContact_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "PersonContact", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.PersonContact), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonGroup_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "PersonGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.PersonGroup), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonPerson_Person", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "PersonPerson", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.PersonPerson), true)]
[assembly: EdmRelationshipAttribute("InfoMedMainDBModel", "FK_PersonPerson_Persons", "Persons", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(DataLayer.DataBaseModels.Persons), "PersonPerson", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(DataLayer.DataBaseModels.PersonPerson), true)]

#endregion

namespace DataLayer.DataBaseModels
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class InfoMedMainDBEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект InfoMedMainDBEntities, используя строку соединения из раздела "InfoMedMainDBEntities" файла конфигурации приложения.
        /// </summary>
        public InfoMedMainDBEntities() : base("name=InfoMedMainDBEntities", "InfoMedMainDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта InfoMedMainDBEntities.
        /// </summary>
        public InfoMedMainDBEntities(string connectionString) : base(connectionString, "InfoMedMainDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта InfoMedMainDBEntities.
        /// </summary>
        public InfoMedMainDBEntities(EntityConnection connection) : base(connection, "InfoMedMainDBEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<AssignedMedicament> AssignedMedicament
        {
            get
            {
                if ((_AssignedMedicament == null))
                {
                    _AssignedMedicament = base.CreateObjectSet<AssignedMedicament>("AssignedMedicament");
                }
                return _AssignedMedicament;
            }
        }
        private ObjectSet<AssignedMedicament> _AssignedMedicament;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<AssignedRiskFactor> AssignedRiskFactor
        {
            get
            {
                if ((_AssignedRiskFactor == null))
                {
                    _AssignedRiskFactor = base.CreateObjectSet<AssignedRiskFactor>("AssignedRiskFactor");
                }
                return _AssignedRiskFactor;
            }
        }
        private ObjectSet<AssignedRiskFactor> _AssignedRiskFactor;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<AssignedSymptom> AssignedSymptom
        {
            get
            {
                if ((_AssignedSymptom == null))
                {
                    _AssignedSymptom = base.CreateObjectSet<AssignedSymptom>("AssignedSymptom");
                }
                return _AssignedSymptom;
            }
        }
        private ObjectSet<AssignedSymptom> _AssignedSymptom;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ContactTypes> ContactTypes
        {
            get
            {
                if ((_ContactTypes == null))
                {
                    _ContactTypes = base.CreateObjectSet<ContactTypes>("ContactTypes");
                }
                return _ContactTypes;
            }
        }
        private ObjectSet<ContactTypes> _ContactTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Credentials> Credentials
        {
            get
            {
                if ((_Credentials == null))
                {
                    _Credentials = base.CreateObjectSet<Credentials>("Credentials");
                }
                return _Credentials;
            }
        }
        private ObjectSet<Credentials> _Credentials;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Groups> Groups
        {
            get
            {
                if ((_Groups == null))
                {
                    _Groups = base.CreateObjectSet<Groups>("Groups");
                }
                return _Groups;
            }
        }
        private ObjectSet<Groups> _Groups;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<MeasuringTypes> MeasuringTypes
        {
            get
            {
                if ((_MeasuringTypes == null))
                {
                    _MeasuringTypes = base.CreateObjectSet<MeasuringTypes>("MeasuringTypes");
                }
                return _MeasuringTypes;
            }
        }
        private ObjectSet<MeasuringTypes> _MeasuringTypes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Medicaments> Medicaments
        {
            get
            {
                if ((_Medicaments == null))
                {
                    _Medicaments = base.CreateObjectSet<Medicaments>("Medicaments");
                }
                return _Medicaments;
            }
        }
        private ObjectSet<Medicaments> _Medicaments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PersonContact> PersonContact
        {
            get
            {
                if ((_PersonContact == null))
                {
                    _PersonContact = base.CreateObjectSet<PersonContact>("PersonContact");
                }
                return _PersonContact;
            }
        }
        private ObjectSet<PersonContact> _PersonContact;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PersonGroup> PersonGroup
        {
            get
            {
                if ((_PersonGroup == null))
                {
                    _PersonGroup = base.CreateObjectSet<PersonGroup>("PersonGroup");
                }
                return _PersonGroup;
            }
        }
        private ObjectSet<PersonGroup> _PersonGroup;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PersonPerson> PersonPerson
        {
            get
            {
                if ((_PersonPerson == null))
                {
                    _PersonPerson = base.CreateObjectSet<PersonPerson>("PersonPerson");
                }
                return _PersonPerson;
            }
        }
        private ObjectSet<PersonPerson> _PersonPerson;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Persons> Persons
        {
            get
            {
                if ((_Persons == null))
                {
                    _Persons = base.CreateObjectSet<Persons>("Persons");
                }
                return _Persons;
            }
        }
        private ObjectSet<Persons> _Persons;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<RiskFactors> RiskFactors
        {
            get
            {
                if ((_RiskFactors == null))
                {
                    _RiskFactors = base.CreateObjectSet<RiskFactors>("RiskFactors");
                }
                return _RiskFactors;
            }
        }
        private ObjectSet<RiskFactors> _RiskFactors;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Symptoms> Symptoms
        {
            get
            {
                if ((_Symptoms == null))
                {
                    _Symptoms = base.CreateObjectSet<Symptoms>("Symptoms");
                }
                return _Symptoms;
            }
        }
        private ObjectSet<Symptoms> _Symptoms;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet AssignedMedicament. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAssignedMedicament(AssignedMedicament assignedMedicament)
        {
            base.AddObject("AssignedMedicament", assignedMedicament);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet AssignedRiskFactor. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAssignedRiskFactor(AssignedRiskFactor assignedRiskFactor)
        {
            base.AddObject("AssignedRiskFactor", assignedRiskFactor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet AssignedSymptom. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAssignedSymptom(AssignedSymptom assignedSymptom)
        {
            base.AddObject("AssignedSymptom", assignedSymptom);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ContactTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContactTypes(ContactTypes contactTypes)
        {
            base.AddObject("ContactTypes", contactTypes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Credentials. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCredentials(Credentials credentials)
        {
            base.AddObject("Credentials", credentials);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Groups. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToGroups(Groups groups)
        {
            base.AddObject("Groups", groups);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet MeasuringTypes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToMeasuringTypes(MeasuringTypes measuringTypes)
        {
            base.AddObject("MeasuringTypes", measuringTypes);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Medicaments. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToMedicaments(Medicaments medicaments)
        {
            base.AddObject("Medicaments", medicaments);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PersonContact. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPersonContact(PersonContact personContact)
        {
            base.AddObject("PersonContact", personContact);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PersonGroup. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPersonGroup(PersonGroup personGroup)
        {
            base.AddObject("PersonGroup", personGroup);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PersonPerson. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPersonPerson(PersonPerson personPerson)
        {
            base.AddObject("PersonPerson", personPerson);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Persons. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPersons(Persons persons)
        {
            base.AddObject("Persons", persons);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet RiskFactors. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRiskFactors(RiskFactors riskFactors)
        {
            base.AddObject("RiskFactors", riskFactors);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Symptoms. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSymptoms(Symptoms symptoms)
        {
            base.AddObject("Symptoms", symptoms);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="AssignedMedicament")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AssignedMedicament : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта AssignedMedicament.
        /// </summary>
        /// <param name="personId">Исходное значение свойства PersonId.</param>
        /// <param name="medicamentId">Исходное значение свойства MedicamentId.</param>
        /// <param name="dosage">Исходное значение свойства Dosage.</param>
        /// <param name="measure">Исходное значение свойства Measure.</param>
        /// <param name="frequency">Исходное значение свойства Frequency.</param>
        /// <param name="isActual">Исходное значение свойства IsActual.</param>
        public static AssignedMedicament CreateAssignedMedicament(global::System.Guid personId, global::System.Guid medicamentId, global::System.Double dosage, global::System.String measure, global::System.DateTime frequency, global::System.Boolean isActual)
        {
            AssignedMedicament assignedMedicament = new AssignedMedicament();
            assignedMedicament.PersonId = personId;
            assignedMedicament.MedicamentId = medicamentId;
            assignedMedicament.Dosage = dosage;
            assignedMedicament.Measure = measure;
            assignedMedicament.Frequency = frequency;
            assignedMedicament.IsActual = isActual;
            return assignedMedicament;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                if (_PersonId != value)
                {
                    OnPersonIdChanging(value);
                    ReportPropertyChanging("PersonId");
                    _PersonId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonId");
                    OnPersonIdChanged();
                }
            }
        }
        private global::System.Guid _PersonId;
        partial void OnPersonIdChanging(global::System.Guid value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid MedicamentId
        {
            get
            {
                return _MedicamentId;
            }
            set
            {
                if (_MedicamentId != value)
                {
                    OnMedicamentIdChanging(value);
                    ReportPropertyChanging("MedicamentId");
                    _MedicamentId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MedicamentId");
                    OnMedicamentIdChanged();
                }
            }
        }
        private global::System.Guid _MedicamentId;
        partial void OnMedicamentIdChanging(global::System.Guid value);
        partial void OnMedicamentIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Dosage
        {
            get
            {
                return _Dosage;
            }
            set
            {
                OnDosageChanging(value);
                ReportPropertyChanging("Dosage");
                _Dosage = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Dosage");
                OnDosageChanged();
            }
        }
        private global::System.Double _Dosage;
        partial void OnDosageChanging(global::System.Double value);
        partial void OnDosageChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Measure
        {
            get
            {
                return _Measure;
            }
            set
            {
                OnMeasureChanging(value);
                ReportPropertyChanging("Measure");
                _Measure = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Measure");
                OnMeasureChanged();
            }
        }
        private global::System.String _Measure;
        partial void OnMeasureChanging(global::System.String value);
        partial void OnMeasureChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.DateTime _Frequency;
        partial void OnFrequencyChanging(global::System.DateTime value);
        partial void OnFrequencyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActual
        {
            get
            {
                return _IsActual;
            }
            set
            {
                OnIsActualChanging(value);
                ReportPropertyChanging("IsActual");
                _IsActual = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActual");
                OnIsActualChanged();
            }
        }
        private global::System.Boolean _IsActual;
        partial void OnIsActualChanging(global::System.Boolean value);
        partial void OnIsActualChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonMedicament_Medicaments", "Medicaments")]
        public Medicaments Medicaments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medicaments>("InfoMedMainDBModel.FK_PersonMedicament_Medicaments", "Medicaments").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medicaments>("InfoMedMainDBModel.FK_PersonMedicament_Medicaments", "Medicaments").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Medicaments> MedicamentsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Medicaments>("InfoMedMainDBModel.FK_PersonMedicament_Medicaments", "Medicaments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Medicaments>("InfoMedMainDBModel.FK_PersonMedicament_Medicaments", "Medicaments", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonMedicament_Persons", "Persons")]
        public Persons Persons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonMedicament_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonMedicament_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> PersonsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonMedicament_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonMedicament_Persons", "Persons", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="AssignedRiskFactor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AssignedRiskFactor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта AssignedRiskFactor.
        /// </summary>
        /// <param name="personId">Исходное значение свойства PersonId.</param>
        /// <param name="riskFactorId">Исходное значение свойства RiskFactorId.</param>
        /// <param name="isActual">Исходное значение свойства IsActual.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        /// <param name="measure">Исходное значение свойства Measure.</param>
        public static AssignedRiskFactor CreateAssignedRiskFactor(global::System.Guid personId, global::System.Guid riskFactorId, global::System.Boolean isActual, global::System.Double value, global::System.String measure)
        {
            AssignedRiskFactor assignedRiskFactor = new AssignedRiskFactor();
            assignedRiskFactor.PersonId = personId;
            assignedRiskFactor.RiskFactorId = riskFactorId;
            assignedRiskFactor.IsActual = isActual;
            assignedRiskFactor.Value = value;
            assignedRiskFactor.Measure = measure;
            return assignedRiskFactor;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                if (_PersonId != value)
                {
                    OnPersonIdChanging(value);
                    ReportPropertyChanging("PersonId");
                    _PersonId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonId");
                    OnPersonIdChanged();
                }
            }
        }
        private global::System.Guid _PersonId;
        partial void OnPersonIdChanging(global::System.Guid value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid RiskFactorId
        {
            get
            {
                return _RiskFactorId;
            }
            set
            {
                if (_RiskFactorId != value)
                {
                    OnRiskFactorIdChanging(value);
                    ReportPropertyChanging("RiskFactorId");
                    _RiskFactorId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RiskFactorId");
                    OnRiskFactorIdChanged();
                }
            }
        }
        private global::System.Guid _RiskFactorId;
        partial void OnRiskFactorIdChanging(global::System.Guid value);
        partial void OnRiskFactorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActual
        {
            get
            {
                return _IsActual;
            }
            set
            {
                OnIsActualChanging(value);
                ReportPropertyChanging("IsActual");
                _IsActual = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActual");
                OnIsActualChanged();
            }
        }
        private global::System.Boolean _IsActual;
        partial void OnIsActualChanging(global::System.Boolean value);
        partial void OnIsActualChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Double _Value;
        partial void OnValueChanging(global::System.Double value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Measure
        {
            get
            {
                return _Measure;
            }
            set
            {
                OnMeasureChanging(value);
                ReportPropertyChanging("Measure");
                _Measure = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Measure");
                OnMeasureChanged();
            }
        }
        private global::System.String _Measure;
        partial void OnMeasureChanging(global::System.String value);
        partial void OnMeasureChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonRiskFactor_Persons", "Persons")]
        public Persons Persons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonRiskFactor_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonRiskFactor_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> PersonsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonRiskFactor_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonRiskFactor_Persons", "Persons", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonRiskFactor_RiskFactors", "RiskFactors")]
        public RiskFactors RiskFactors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskFactors>("InfoMedMainDBModel.FK_PersonRiskFactor_RiskFactors", "RiskFactors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskFactors>("InfoMedMainDBModel.FK_PersonRiskFactor_RiskFactors", "RiskFactors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskFactors> RiskFactorsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskFactors>("InfoMedMainDBModel.FK_PersonRiskFactor_RiskFactors", "RiskFactors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskFactors>("InfoMedMainDBModel.FK_PersonRiskFactor_RiskFactors", "RiskFactors", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="AssignedSymptom")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AssignedSymptom : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта AssignedSymptom.
        /// </summary>
        /// <param name="personId">Исходное значение свойства PersonId.</param>
        /// <param name="symptomId">Исходное значение свойства SymptomId.</param>
        /// <param name="isActual">Исходное значение свойства IsActual.</param>
        public static AssignedSymptom CreateAssignedSymptom(global::System.Guid personId, global::System.Guid symptomId, global::System.Boolean isActual)
        {
            AssignedSymptom assignedSymptom = new AssignedSymptom();
            assignedSymptom.PersonId = personId;
            assignedSymptom.SymptomId = symptomId;
            assignedSymptom.IsActual = isActual;
            return assignedSymptom;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                if (_PersonId != value)
                {
                    OnPersonIdChanging(value);
                    ReportPropertyChanging("PersonId");
                    _PersonId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonId");
                    OnPersonIdChanged();
                }
            }
        }
        private global::System.Guid _PersonId;
        partial void OnPersonIdChanging(global::System.Guid value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SymptomId
        {
            get
            {
                return _SymptomId;
            }
            set
            {
                if (_SymptomId != value)
                {
                    OnSymptomIdChanging(value);
                    ReportPropertyChanging("SymptomId");
                    _SymptomId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SymptomId");
                    OnSymptomIdChanged();
                }
            }
        }
        private global::System.Guid _SymptomId;
        partial void OnSymptomIdChanging(global::System.Guid value);
        partial void OnSymptomIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActual
        {
            get
            {
                return _IsActual;
            }
            set
            {
                OnIsActualChanging(value);
                ReportPropertyChanging("IsActual");
                _IsActual = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActual");
                OnIsActualChanged();
            }
        }
        private global::System.Boolean _IsActual;
        partial void OnIsActualChanging(global::System.Boolean value);
        partial void OnIsActualChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonSymptom_Person", "Persons")]
        public Persons Persons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonSymptom_Person", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonSymptom_Person", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> PersonsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonSymptom_Person", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonSymptom_Person", "Persons", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonSymptom_Symptoms", "Symptoms")]
        public Symptoms Symptoms
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Symptoms>("InfoMedMainDBModel.FK_PersonSymptom_Symptoms", "Symptoms").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Symptoms>("InfoMedMainDBModel.FK_PersonSymptom_Symptoms", "Symptoms").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Symptoms> SymptomsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Symptoms>("InfoMedMainDBModel.FK_PersonSymptom_Symptoms", "Symptoms");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Symptoms>("InfoMedMainDBModel.FK_PersonSymptom_Symptoms", "Symptoms", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="ContactTypes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContactTypes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ContactTypes.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static ContactTypes CreateContactTypes(global::System.Guid id, global::System.String title)
        {
            ContactTypes contactTypes = new ContactTypes();
            contactTypes.Id = id;
            contactTypes.Title = title;
            return contactTypes;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonContact_ContactTypes", "PersonContact")]
        public EntityCollection<PersonContact> PersonContact
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonContact>("InfoMedMainDBModel.FK_PersonContact_ContactTypes", "PersonContact");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonContact>("InfoMedMainDBModel.FK_PersonContact_ContactTypes", "PersonContact", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="Credentials")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Credentials : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Credentials.
        /// </summary>
        /// <param name="personId">Исходное значение свойства PersonId.</param>
        /// <param name="login">Исходное значение свойства Login.</param>
        /// <param name="password">Исходное значение свойства Password.</param>
        public static Credentials CreateCredentials(global::System.Guid personId, global::System.String login, global::System.String password)
        {
            Credentials credentials = new Credentials();
            credentials.PersonId = personId;
            credentials.Login = login;
            credentials.Password = password;
            return credentials;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                if (_PersonId != value)
                {
                    OnPersonIdChanging(value);
                    ReportPropertyChanging("PersonId");
                    _PersonId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonId");
                    OnPersonIdChanged();
                }
            }
        }
        private global::System.Guid _PersonId;
        partial void OnPersonIdChanging(global::System.Guid value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_Credentials_Persons", "Persons")]
        public Persons Persons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_Credentials_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_Credentials_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> PersonsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_Credentials_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_Credentials_Persons", "Persons", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="Groups")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Groups : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Groups.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Groups CreateGroups(global::System.Guid id, global::System.String name)
        {
            Groups groups = new Groups();
            groups.Id = id;
            groups.Name = name;
            return groups;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonGroup_Groups", "PersonGroup")]
        public EntityCollection<PersonGroup> PersonGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonGroup>("InfoMedMainDBModel.FK_PersonGroup_Groups", "PersonGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonGroup>("InfoMedMainDBModel.FK_PersonGroup_Groups", "PersonGroup", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="MeasuringTypes")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MeasuringTypes : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта MeasuringTypes.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="title">Исходное значение свойства Title.</param>
        public static MeasuringTypes CreateMeasuringTypes(global::System.Guid id, global::System.String title)
        {
            MeasuringTypes measuringTypes = new MeasuringTypes();
            measuringTypes.Id = id;
            measuringTypes.Title = title;
            return measuringTypes;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="Medicaments")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Medicaments : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Medicaments.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Medicaments CreateMedicaments(global::System.Guid id, global::System.String code, global::System.String name)
        {
            Medicaments medicaments = new Medicaments();
            medicaments.Id = id;
            medicaments.Code = code;
            medicaments.Name = name;
            return medicaments;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonMedicament_Medicaments", "AssignedMedicament")]
        public EntityCollection<AssignedMedicament> AssignedMedicament
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssignedMedicament>("InfoMedMainDBModel.FK_PersonMedicament_Medicaments", "AssignedMedicament");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssignedMedicament>("InfoMedMainDBModel.FK_PersonMedicament_Medicaments", "AssignedMedicament", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="PersonContact")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PersonContact : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PersonContact.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="personId">Исходное значение свойства PersonId.</param>
        /// <param name="contactTypeId">Исходное значение свойства ContactTypeId.</param>
        /// <param name="value">Исходное значение свойства Value.</param>
        public static PersonContact CreatePersonContact(global::System.Guid id, global::System.Guid personId, global::System.Guid contactTypeId, global::System.String value)
        {
            PersonContact personContact = new PersonContact();
            personContact.Id = id;
            personContact.PersonId = personId;
            personContact.ContactTypeId = contactTypeId;
            personContact.Value = value;
            return personContact;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                OnPersonIdChanging(value);
                ReportPropertyChanging("PersonId");
                _PersonId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PersonId");
                OnPersonIdChanged();
            }
        }
        private global::System.Guid _PersonId;
        partial void OnPersonIdChanging(global::System.Guid value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ContactTypeId
        {
            get
            {
                return _ContactTypeId;
            }
            set
            {
                OnContactTypeIdChanging(value);
                ReportPropertyChanging("ContactTypeId");
                _ContactTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContactTypeId");
                OnContactTypeIdChanged();
            }
        }
        private global::System.Guid _ContactTypeId;
        partial void OnContactTypeIdChanging(global::System.Guid value);
        partial void OnContactTypeIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonContact_ContactTypes", "ContactTypes")]
        public ContactTypes ContactTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContactTypes>("InfoMedMainDBModel.FK_PersonContact_ContactTypes", "ContactTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContactTypes>("InfoMedMainDBModel.FK_PersonContact_ContactTypes", "ContactTypes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ContactTypes> ContactTypesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContactTypes>("InfoMedMainDBModel.FK_PersonContact_ContactTypes", "ContactTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ContactTypes>("InfoMedMainDBModel.FK_PersonContact_ContactTypes", "ContactTypes", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonContact_Persons", "Persons")]
        public Persons Persons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonContact_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonContact_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> PersonsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonContact_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonContact_Persons", "Persons", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="PersonGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PersonGroup : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PersonGroup.
        /// </summary>
        /// <param name="personId">Исходное значение свойства PersonId.</param>
        /// <param name="groupId">Исходное значение свойства GroupId.</param>
        /// <param name="entryDate">Исходное значение свойства EntryDate.</param>
        public static PersonGroup CreatePersonGroup(global::System.Guid personId, global::System.Guid groupId, global::System.DateTime entryDate)
        {
            PersonGroup personGroup = new PersonGroup();
            personGroup.PersonId = personId;
            personGroup.GroupId = groupId;
            personGroup.EntryDate = entryDate;
            return personGroup;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                if (_PersonId != value)
                {
                    OnPersonIdChanging(value);
                    ReportPropertyChanging("PersonId");
                    _PersonId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonId");
                    OnPersonIdChanged();
                }
            }
        }
        private global::System.Guid _PersonId;
        partial void OnPersonIdChanging(global::System.Guid value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GroupId
        {
            get
            {
                return _GroupId;
            }
            set
            {
                if (_GroupId != value)
                {
                    OnGroupIdChanging(value);
                    ReportPropertyChanging("GroupId");
                    _GroupId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GroupId");
                    OnGroupIdChanged();
                }
            }
        }
        private global::System.Guid _GroupId;
        partial void OnGroupIdChanging(global::System.Guid value);
        partial void OnGroupIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EntryDate
        {
            get
            {
                return _EntryDate;
            }
            set
            {
                OnEntryDateChanging(value);
                ReportPropertyChanging("EntryDate");
                _EntryDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EntryDate");
                OnEntryDateChanged();
            }
        }
        private global::System.DateTime _EntryDate;
        partial void OnEntryDateChanging(global::System.DateTime value);
        partial void OnEntryDateChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonGroup_Groups", "Groups")]
        public Groups Groups
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Groups>("InfoMedMainDBModel.FK_PersonGroup_Groups", "Groups").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Groups>("InfoMedMainDBModel.FK_PersonGroup_Groups", "Groups").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Groups> GroupsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Groups>("InfoMedMainDBModel.FK_PersonGroup_Groups", "Groups");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Groups>("InfoMedMainDBModel.FK_PersonGroup_Groups", "Groups", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonGroup_Persons", "Persons")]
        public Persons Persons
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonGroup_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonGroup_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> PersonsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonGroup_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonGroup_Persons", "Persons", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="PersonPerson")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PersonPerson : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PersonPerson.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="firstPersonId">Исходное значение свойства FirstPersonId.</param>
        /// <param name="secondPersonId">Исходное значение свойства SecondPersonId.</param>
        /// <param name="isExist">Исходное значение свойства IsExist.</param>
        public static PersonPerson CreatePersonPerson(global::System.Guid id, global::System.Guid firstPersonId, global::System.Guid secondPersonId, global::System.Boolean isExist)
        {
            PersonPerson personPerson = new PersonPerson();
            personPerson.Id = id;
            personPerson.FirstPersonId = firstPersonId;
            personPerson.SecondPersonId = secondPersonId;
            personPerson.IsExist = isExist;
            return personPerson;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid FirstPersonId
        {
            get
            {
                return _FirstPersonId;
            }
            set
            {
                OnFirstPersonIdChanging(value);
                ReportPropertyChanging("FirstPersonId");
                _FirstPersonId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FirstPersonId");
                OnFirstPersonIdChanged();
            }
        }
        private global::System.Guid _FirstPersonId;
        partial void OnFirstPersonIdChanging(global::System.Guid value);
        partial void OnFirstPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SecondPersonId
        {
            get
            {
                return _SecondPersonId;
            }
            set
            {
                OnSecondPersonIdChanging(value);
                ReportPropertyChanging("SecondPersonId");
                _SecondPersonId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SecondPersonId");
                OnSecondPersonIdChanged();
            }
        }
        private global::System.Guid _SecondPersonId;
        partial void OnSecondPersonIdChanging(global::System.Guid value);
        partial void OnSecondPersonIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsExist
        {
            get
            {
                return _IsExist;
            }
            set
            {
                OnIsExistChanging(value);
                ReportPropertyChanging("IsExist");
                _IsExist = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsExist");
                OnIsExistChanged();
            }
        }
        private global::System.Boolean _IsExist;
        partial void OnIsExistChanging(global::System.Boolean value);
        partial void OnIsExistChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonPerson_Person", "Persons")]
        public Persons FirstPerson
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Person", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Person", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> FirstPersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Person", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Person", "Persons", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonPerson_Persons", "Persons")]
        public Persons SecondPerson
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Persons", "Persons").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Persons", "Persons").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Persons> SecondPersonReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Persons", "Persons");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Persons>("InfoMedMainDBModel.FK_PersonPerson_Persons", "Persons", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="Persons")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Persons : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Persons.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="middleName">Исходное значение свойства MiddleName.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        public static Persons CreatePersons(global::System.Guid id, global::System.String firstName, global::System.String middleName, global::System.String lastName)
        {
            Persons persons = new Persons();
            persons.Id = id;
            persons.FirstName = firstName;
            persons.MiddleName = middleName;
            persons.LastName = lastName;
            return persons;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MiddleName
        {
            get
            {
                return _MiddleName;
            }
            set
            {
                OnMiddleNameChanging(value);
                ReportPropertyChanging("MiddleName");
                _MiddleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MiddleName");
                OnMiddleNameChanged();
            }
        }
        private global::System.String _MiddleName;
        partial void OnMiddleNameChanging(global::System.String value);
        partial void OnMiddleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonMedicament_Persons", "AssignedMedicament")]
        public EntityCollection<AssignedMedicament> AssignedMedicament
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssignedMedicament>("InfoMedMainDBModel.FK_PersonMedicament_Persons", "AssignedMedicament");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssignedMedicament>("InfoMedMainDBModel.FK_PersonMedicament_Persons", "AssignedMedicament", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonRiskFactor_Persons", "AssignedRiskFactor")]
        public EntityCollection<AssignedRiskFactor> AssignedRiskFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssignedRiskFactor>("InfoMedMainDBModel.FK_PersonRiskFactor_Persons", "AssignedRiskFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssignedRiskFactor>("InfoMedMainDBModel.FK_PersonRiskFactor_Persons", "AssignedRiskFactor", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonSymptom_Person", "AssignedSymptom")]
        public EntityCollection<AssignedSymptom> AssignedSymptom
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssignedSymptom>("InfoMedMainDBModel.FK_PersonSymptom_Person", "AssignedSymptom");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssignedSymptom>("InfoMedMainDBModel.FK_PersonSymptom_Person", "AssignedSymptom", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_Credentials_Persons", "Credentials")]
        public Credentials Credentials
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Credentials>("InfoMedMainDBModel.FK_Credentials_Persons", "Credentials").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Credentials>("InfoMedMainDBModel.FK_Credentials_Persons", "Credentials").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Credentials> CredentialsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Credentials>("InfoMedMainDBModel.FK_Credentials_Persons", "Credentials");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Credentials>("InfoMedMainDBModel.FK_Credentials_Persons", "Credentials", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonContact_Persons", "PersonContact")]
        public EntityCollection<PersonContact> PersonContact
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonContact>("InfoMedMainDBModel.FK_PersonContact_Persons", "PersonContact");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonContact>("InfoMedMainDBModel.FK_PersonContact_Persons", "PersonContact", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonGroup_Persons", "PersonGroup")]
        public EntityCollection<PersonGroup> PersonGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonGroup>("InfoMedMainDBModel.FK_PersonGroup_Persons", "PersonGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonGroup>("InfoMedMainDBModel.FK_PersonGroup_Persons", "PersonGroup", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonPerson_Person", "PersonPerson")]
        public EntityCollection<PersonPerson> FirstPerson
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonPerson>("InfoMedMainDBModel.FK_PersonPerson_Person", "PersonPerson");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonPerson>("InfoMedMainDBModel.FK_PersonPerson_Person", "PersonPerson", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonPerson_Persons", "PersonPerson")]
        public EntityCollection<PersonPerson> SecondPerson
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonPerson>("InfoMedMainDBModel.FK_PersonPerson_Persons", "PersonPerson");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonPerson>("InfoMedMainDBModel.FK_PersonPerson_Persons", "PersonPerson", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="RiskFactors")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RiskFactors : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта RiskFactors.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static RiskFactors CreateRiskFactors(global::System.Guid id, global::System.String name)
        {
            RiskFactors riskFactors = new RiskFactors();
            riskFactors.Id = id;
            riskFactors.Name = name;
            return riskFactors;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonRiskFactor_RiskFactors", "AssignedRiskFactor")]
        public EntityCollection<AssignedRiskFactor> AssignedRiskFactor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssignedRiskFactor>("InfoMedMainDBModel.FK_PersonRiskFactor_RiskFactors", "AssignedRiskFactor");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssignedRiskFactor>("InfoMedMainDBModel.FK_PersonRiskFactor_RiskFactors", "AssignedRiskFactor", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="InfoMedMainDBModel", Name="Symptoms")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Symptoms : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Symptoms.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Symptoms CreateSymptoms(global::System.Guid id, global::System.String name)
        {
            Symptoms symptoms = new Symptoms();
            symptoms.Id = id;
            symptoms.Name = name;
            return symptoms;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("InfoMedMainDBModel", "FK_PersonSymptom_Symptoms", "AssignedSymptom")]
        public EntityCollection<AssignedSymptom> AssignedSymptom
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AssignedSymptom>("InfoMedMainDBModel.FK_PersonSymptom_Symptoms", "AssignedSymptom");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AssignedSymptom>("InfoMedMainDBModel.FK_PersonSymptom_Symptoms", "AssignedSymptom", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
